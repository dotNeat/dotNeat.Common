using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq.Expressions;

namespace dotNeat.Common.Patterns.EventsPattern
{
    public static class EventHandlerExtensions
    {
        /// <summary>
        /// Raises an event using best practices.
        /// </summary>       
        /// <param name="eventHandler">The event.</param>
        /// <param name="sender">The sourceStateId of the event.</param>
        /// <param name="args">An <see cref="EventArgs"/> that contains the event data.</param>
        public static void Raise(
            this EventHandler eventHandler, 
            object sender, 
            EventArgs args
            )          
        {
            EventHandler handler = eventHandler;
            if (handler != null)
            {
                handler(sender, args);
            }
        }
        
        /// <summary>
        /// Raises an event using best practices.
        /// </summary>
        /// <typeparam name="T">The type of the event data generated by the event.</typeparam>
        /// <param name="eventHandler">The event.</param>
        /// <param name="sender">The sourceStateId of the event.</param>
        /// <param name="args">An <see cref="EventArgs"/> that contains the event data.</param>
        public static void Raise<T>(
            this EventHandler<T> eventHandler, 
            object sender, 
            T args
            )
          where T : EventArgs
        {
            EventHandler<T> handler = eventHandler;
            if (handler != null)
            {
                handler(sender, args);
            }
        }

        /// <summary>
        /// Raises the specified event handler.
        /// </summary>
        /// <param name="eventHandler">The event handler.</param>
        /// <param name="sender">The sender.</param>
        /// <param name="propertyName">Name of the property.</param>
        public static void Raise(
            this PropertyChangingEventHandler eventHandler, 
            object sender, 
            string propertyName
            )
        {
            PropertyChangingEventHandler eh = eventHandler;
            if (eh != null)
            {
                eh(sender, new PropertyChangingEventArgs(propertyName));
            }
        }

        /// <summary>
        /// Raises the specified event handler.
        /// </summary>
        /// <param name="eventHandler">The event handler.</param>
        /// <param name="sender">The sender.</param>
        /// <param name="propertyName">Name of the property.</param>
        public static void Raise(
            this PropertyChangedEventHandler eventHandler, 
            object sender, 
            string propertyName
            )
        {
            PropertyChangedEventHandler eh = eventHandler;
            if (eh != null)
            {
                eh(sender, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// Changes the and notify.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="handler">The handler.</param>
        /// <param name="field">The field.</param>
        /// <param name="value">The value.</param>
        /// <param name="memberExpression">The member expression.</param>
        /// <returns></returns>
        /// <exception cref="System.ArgumentNullException">memberExpression</exception>
        /// <exception cref="System.ArgumentException">Lambda must return a property.</exception>
        /// <remarks>
        /// <example> Usage:
        /// <code>
        ///  private string _name;
        ///  public string Name
        ///  {
        ///      get { return _name; }
        ///      set { this.PropertyChanged.ChangeAndNotify(ref _name, value, () => Name); }
        ///  }
        /// </code>
        /// </example>
        /// </remarks>
        public static bool ChangeAndNotify<T>(
            this PropertyChangedEventHandler handler,
            ref T field, 
            T value, 
            Expression<Func<T>> memberExpression
            )
        {
            if (memberExpression == null)
            {
                throw new ArgumentNullException("memberExpression");
            }
            var body = memberExpression.Body as MemberExpression;
            if (body == null)
            {
                throw new ArgumentException("Lambda must return a property.");
            }
            if (EqualityComparer<T>.Default.Equals(field, value))
            {
                return false;
            }

            field = value;

            var vmExpression = body.Expression as ConstantExpression;
            if (vmExpression != null)
            {
                LambdaExpression lambda = Expression.Lambda(vmExpression);
                Delegate vmFunc = lambda.Compile();
                object? sender = vmFunc.DynamicInvoke();

                if (handler != null)
                {
                    handler(sender, new PropertyChangedEventArgs(body.Member.Name));
                }
            }

            return true;
        }

        /// <summary>
        /// Notifies the specified handler.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="handler">The handler.</param>
        /// <param name="field">The field.</param>
        /// <param name="value">The value.</param>
        /// <param name="memberExpression">The member expression.</param>
        /// <exception cref="System.ArgumentNullException">memberExpression</exception>
        /// <exception cref="System.ArgumentException">Lambda must return a property.</exception>
        /// <remarks>
        ///   <example> Usage:
        ///   <code>
        /// private string _status;
        /// prublic string Data
        /// {
        /// get { return _name; }
        /// }
        /// public void Process(string newStatus)
        /// {
        //...
        /// this.PropertyChanging.Notify(ref _name, newStatus, () =&gt; Name);
        /// _name = newStatus;
        /// this.PropertyChanged.Notify(ref _name, () =&gt; Name);
        //...
        /// }
        ///   </code>
        ///   </example>
        /// </remarks>
        public static void Notify<T>(
            this PropertyChangedEventHandler handler,
            ref T field, 
            T value, 
            Expression<Func<T>> memberExpression
            )
        {
            if (memberExpression == null)
            {
                throw new ArgumentNullException("memberExpression");
            }
            var body = memberExpression.Body as MemberExpression;
            if (body == null)
            {
                throw new ArgumentException("Lambda must return a property.");
            }

            var vmExpression = body.Expression as ConstantExpression;
            if (vmExpression != null)
            {
                LambdaExpression lambda = Expression.Lambda(vmExpression);
                Delegate vmFunc = lambda.Compile();
                object? sender = vmFunc.DynamicInvoke();

                if (handler != null)
                {
                    handler(sender, new PropertyChangedEventArgs(body.Member.Name));
                }
            }
        }

        /// <summary>
        /// Notifies the specified handler.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="handler">The handler.</param>
        /// <param name="field">The field.</param>
        /// <param name="value">The value.</param>
        /// <param name="memberExpression">The member expression.</param>
        /// <returns></returns>
        /// <exception cref="System.ArgumentNullException">memberExpression</exception>
        /// <exception cref="System.ArgumentException">Lambda must return a property.</exception>
        /// <remarks>
        ///   <example> Usage:
        ///   <code>
        /// private string _status;
        /// prublic string Data
        /// {
        /// get { return _name; }
        /// }
        /// public void Process(string newStatus)
        /// {
        /// this.PropertyChanging.Notify(ref _name, newStatus, () =&gt; Name);
        /// _name = newStatus;
        /// this.PropertyChanged.Notify(ref _name, () =&gt; Name);
        /// }
        ///   </code>
        ///   </example>
        /// </remarks>
        public static bool Notify<T>(
            this PropertyChangingEventHandler handler,
            ref T field, 
            T value, 
            Expression<Func<T>> memberExpression
            )
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
            {
                return false;
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException("memberExpression");
            }
            var body = memberExpression.Body as MemberExpression;
            if (body == null)
            {
                throw new ArgumentException("Lambda must return a property.");
            }

            var vmExpression = body.Expression as ConstantExpression;
            if (vmExpression != null)
            {
                LambdaExpression lambda = Expression.Lambda(vmExpression);
                Delegate vmFunc = lambda.Compile();
                object? sender = vmFunc.DynamicInvoke();

                handler(sender, new PropertyChangingEventArgs(body.Member.Name));
            }

            return true;
        }

    }
}
